#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const packageJson = require("../package.json");

/**
 * Generate YML metadata files for electron-updater
 * This script creates the necessary metadata files that electron-updater expects
 * for auto-update functionality on different platforms.
 */

function calculateFileHash(filePath) {
  const fileBuffer = fs.readFileSync(filePath);
  const hashSum = crypto.createHash("sha512");
  hashSum.update(fileBuffer);
  return hashSum.digest("base64");
}

function getFileSize(filePath) {
  const stats = fs.statSync(filePath);
  return stats.size;
}

function generateMacYml() {
  const version = packageJson.version;
  const outDir = path.join(__dirname, "../out/make");

  // Look for the ZIP file (latest version) - try multiple architecture patterns
  const zipDir = path.join(outDir, "zip/darwin/arm64");

  if (!fs.existsSync(zipDir)) {
    console.error("ZIP directory not found:", zipDir);
    return;
  }

  const zipFiles = fs
    .readdirSync(zipDir)
    .filter((file) => file.endsWith(".zip") && file.includes(version));

  if (zipFiles.length === 0) {
    console.error("No ZIP file found for version:", version);
    return;
  }

  const zipFile = zipFiles[0]; // Take the first matching file
  const zipPath = path.join(zipDir, zipFile);

  const hash = calculateFileHash(zipPath);
  const size = getFileSize(zipPath);

  // GitHub repository info from package.json
  const repoUrl = packageJson.repository.url.replace("https://github.com/", "").replace(".git", "");

  // Use /latest/download/ instead of version-specific URLs for electron-updater
  const githubReleaseUrl = `https://github.com/${repoUrl}/releases/latest/download/${zipFile}`;

  // For macOS, electron-updater sometimes expects a simpler file name without architecture
  // Let's create a more generic version that should work better
  const genericFileName = zipFile.replace("-darwin-arm64", "-mac").replace("-arm64", "");
  const genericUrl = `https://github.com/${repoUrl}/releases/latest/download/${genericFileName}`;

  // Generate the YML content for macOS
  // When using GitHub provider, use just the filename - electron-updater will construct the full URL
  const ymlContent = `version: ${version}
files:
  - url: ${zipFile}
    sha512: ${hash}
    size: ${size}
    blockMapSize: 0
path: ${zipFile}
sha512: ${hash}
releaseDate: ${new Date().toISOString()}
`;

  // Write the YML file
  const ymlPath = path.join(outDir, "latest-mac.yml");
  fs.writeFileSync(ymlPath, ymlContent);

  console.log("Generated latest-mac.yml:", ymlPath);
  console.log("Content:");
  console.log(ymlContent);

  return ymlPath;
}

function generateWinYml() {
  // Windows YML should already be generated by electron-forge-maker-squirrel
  // But we can create a backup if needed
  const version = packageJson.version;
  const outDir = path.join(__dirname, "../out/make");

  // Look for the Windows installer
  const winFiles = fs
    .readdirSync(outDir)
    .filter((file) => file.endsWith(".exe") && file.includes(version));

  if (winFiles.length === 0) {
    console.log("No Windows installer found for version:", version);
    return;
  }

  const winFile = winFiles[0];
  const winPath = path.join(outDir, winFile);

  const hash = calculateFileHash(winPath);
  const size = getFileSize(winPath);

  // GitHub repository info from package.json
  const repoUrl = packageJson.repository.url.replace("https://github.com/", "").replace(".git", "");
  const githubReleaseUrl = `https://github.com/${repoUrl}/releases/latest/download/${winFile}`;

  // Generate the YML content for Windows
  // When using GitHub provider, use just the filename - electron-updater will construct the full URL
  const ymlContent = `version: ${version}
files:
  - url: ${winFile}
    sha512: ${hash}
    size: ${size}
path: ${winFile}
sha512: ${hash}
releaseDate: ${new Date().toISOString()}
`;

  const ymlPath = path.join(outDir, "latest.yml");
  fs.writeFileSync(ymlPath, ymlContent);

  console.log("Generated latest.yml:", ymlPath);
  return ymlPath;
}

function generateLinuxYml() {
  const version = packageJson.version;
  const outDir = path.join(__dirname, "../out/make");

  // Look for the Linux package (AppImage, DEB, or RPM)
  const linuxFiles = fs
    .readdirSync(outDir)
    .filter((file) => 
      (file.endsWith(".AppImage") || file.endsWith(".deb") || file.endsWith(".rpm")) && 
      file.includes(version)
    );

  if (linuxFiles.length === 0) {
    console.log("No Linux package found for version:", version);
    return;
  }

  const linuxFile = linuxFiles[0]; // Take the first matching file (prefer AppImage, then DEB, then RPM)
  const linuxPath = path.join(outDir, linuxFile);

  const hash = calculateFileHash(linuxPath);
  const size = getFileSize(linuxPath);

  // GitHub repository info from package.json
  const repoUrl = packageJson.repository.url.replace("https://github.com/", "").replace(".git", "");
  const githubReleaseUrl = `https://github.com/${repoUrl}/releases/latest/download/${linuxFile}`;

  // Generate the YML content for Linux
  // When using GitHub provider, use just the filename - electron-updater will construct the full URL
  const ymlContent = `version: ${version}
files:
  - url: ${linuxFile}
    sha512: ${hash}
    size: ${size}
path: ${linuxFile}
sha512: ${hash}
releaseDate: ${new Date().toISOString()}
`;

  // Write the YML file
  const ymlPath = path.join(outDir, "latest-linux.yml");
  fs.writeFileSync(ymlPath, ymlContent);

  console.log("Generated latest-linux.yml:", ymlPath);
  console.log("Content:");
  console.log(ymlContent);

  return ymlPath;
}

function main() {
  console.log("Generating YML metadata files for electron-updater...");

  try {
    const macYml = generateMacYml();
    const winYml = generateWinYml();
    const linuxYml = generateLinuxYml();

    console.log("\nYML files generated successfully!");
    console.log("Make sure to upload these files along with your release assets to GitHub.");
  } catch (error) {
    console.error("Error generating YML files:", error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  generateMacYml,
  generateWinYml,
  generateLinuxYml,
};
